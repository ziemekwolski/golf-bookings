require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ClubsController do

  let(:user) {users(:default)}


  before(:each) do
    login_user(user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Club. As you add validations to Club, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "My club" } }

  describe "GET index" do
    it "assigns all clubs as @clubs" do
      club = Club.create! valid_attributes
      get :index, {}
      expect(assigns(:clubs).count).to eq(2)
    end
  end

  describe "GET show" do
    it "assigns the requested club as @club" do
      club = Club.create! valid_attributes
      get :show, {:id => club.to_param}
      expect(assigns(:club)).to eq(club)
    end
  end

  describe "GET new" do
    it "assigns a new club as @club" do
      get :new, {}
      expect(assigns(:club)).to be_a_new(Club)
    end
  end

  describe "GET edit" do
    it "assigns the requested club as @club" do
      club = Club.create! valid_attributes
      get :edit, {:id => club.to_param}
      expect(assigns(:club)).to eq(club)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Club" do
        expect {
          post :create, {:club => valid_attributes}
        }.to change(Club, :count).by(1)
      end

      it "assigns a newly created club as @club" do
        post :create, {:club => valid_attributes}
        expect(assigns(:club)).to be_a(Club)
        expect(assigns(:club)).to be_persisted
      end

      it "redirects to the created club" do
        post :create, {:club => valid_attributes}
        expect(response).to redirect_to(Club.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved club as @club" do
        # Trigger the behavior that occurs when invalid params are submitted
        expect_any_instance_of(Club).to receive(:save).and_return(false)
        post :create, {:club => { "name" => "invalid value" }}
        expect(assigns(:club)).to be_a_new(Club)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        expect_any_instance_of(Club).to receive(:save).and_return(false)
        post :create, {:club => { "name" => "invalid value" }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested club" do
        club = Club.create! valid_attributes
        # Assuming there are no other clubs in the database, this
        # specifies that the Club created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Club).to receive(:update).with({ "name" => "MyString" })
        put :update, {:id => club.to_param, :club => { "name" => "MyString" }}
      end

      it "assigns the requested club as @club" do
        club = Club.create! valid_attributes
        put :update, {:id => club.to_param, :club => valid_attributes}
        expect(assigns(:club)).to eq(club)
      end

      it "redirects to the club" do
        club = Club.create! valid_attributes
        put :update, {:id => club.to_param, :club => valid_attributes}
        expect(response).to redirect_to(club)
      end
    end

    describe "with invalid params" do
      it "assigns the club as @club" do
        club = Club.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        expect_any_instance_of(Club).to receive(:save).and_return(false)
        put :update, {:id => club.to_param, :club => { "name" => "invalid value" }}
        expect(assigns(:club)).to eq(club)
      end

      it "re-renders the 'edit' template" do
        club = Club.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        expect_any_instance_of(Club).to receive(:save).and_return(false)
        put :update, {:id => club.to_param, :club => { "name" => "invalid value" }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested club" do
      club = Club.create! valid_attributes
      expect {
        delete :destroy, {:id => club.to_param}
      }.to change(Club, :count).by(-1)
    end

    it "redirects to the clubs list" do
      club = Club.create! valid_attributes
      delete :destroy, {:id => club.to_param}
      expect(response).to redirect_to(clubs_url)
    end
  end

end
